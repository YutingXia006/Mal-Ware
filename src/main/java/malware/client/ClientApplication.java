package malware.client;

import javafx.application.Application;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import malware.client.malFunctions.FunctionHandler;
import malware.client.uiClient.ClientActionHandler;
import malware.client.uiClient.ClientUiBuilder;
import malware.server.ServerApplication;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import java.util.ArrayList;

public class ClientApplication extends Application {
    private ArrayList<Thread> threads;
    private final static Logger log = LogManager.getLogger(ClientApplication.class);

    public static void main(String[] args) {
       log.info("Launching app.");
       launch();
       log.info("Closing app.");
    }

    @Override
    public void stop() throws Exception {
        super.stop();
        for (Thread thread: threads){
            thread.interrupt();
        }
    }

    @Override
    public void start(Stage primaryStage) {
        threads = new ArrayList<>();

        Canvas canvas = new Canvas(0,0 );

        ClientNetInterface clientNetInterface = new ClientNetInterface();

        CanvasPainter painter = new CanvasPainter(canvas.getGraphicsContext2D(), clientNetInterface);

        FunctionHandler functionHandler = new FunctionHandler(painter, canvas.getGraphicsContext2D());

        ServerApplication serverApplication = new ServerApplication();

        ClientActionHandler clientActionHandler = new ClientActionHandler(
                clientNetInterface,
                painter,
                threads,
                canvas.getGraphicsContext2D(),
                functionHandler
        );

        ClientUiBuilder clientUiBuilder = new ClientUiBuilder(
                primaryStage,
                clientActionHandler,
                canvas,
                clientNetInterface,
                functionHandler,
                serverApplication
        );

        primaryStage.setTitle("Client");
        primaryStage.setScene(clientUiBuilder.makeInitUI());
        primaryStage.setResizable(false);
        primaryStage.show();
    }
}

//Dominic's IP for testing Purposes: 192.168.193.187