package malware.client.uiClient;

import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeLineCap;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import malware.client.ClientNetInterface;
import malware.UserAction;
import malware.client.malFunctions.FunctionHandler;
import malware.server.ServerApplication;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.lang.reflect.Array;
import java.util.ArrayList;

public class ClientUiBuilder {

    private static final Logger log = LogManager.getLogger(ClientUiBuilder.class);
    ClientNetInterface clientNetInterface;
    ClientActionHandler clientActionHandler;
    FunctionHandler functionHandler;
    ServerApplication serverApplication;
    Stage primaryStage;

    GraphicsContext gc;
    Canvas canvas;

    Font font = new Font(16.0);
    double windowSizeX = 1080.0d;
    double windowSizeY = 720.0d;
    double toolbarSizeY = 40.0d;


    public ClientUiBuilder(Stage primaryStage, ClientActionHandler clientActionHandler, Canvas canvas, ClientNetInterface clientNetInterface, FunctionHandler functionHandler, ServerApplication serverApplication) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.canvas = canvas;
        this.functionHandler = functionHandler;
        this.serverApplication = serverApplication;
        canvas.setWidth(windowSizeX);
        canvas.setHeight(windowSizeY - toolbarSizeY);
        gc = canvas.getGraphicsContext2D();
        this.clientActionHandler = clientActionHandler;

    }

    public HBox createBanner(String labelText) throws FileNotFoundException {
        HBox banner = new HBox();
        banner.setPrefHeight(100);
        banner.setStyle("-fx-background-color: dddddd;");
        banner.setPadding(new Insets(10, 0, 0, 10));

        ImageView logo = new ImageView(new Image(new FileInputStream("src/main/resources/malware_logo.JPG")));
        logo.setFitWidth(80);
        logo.setPreserveRatio(true);
        banner.getChildren().add(logo);

        Label bannerLabel = new Label(labelText);
        bannerLabel.setFont(new Font(20));
        bannerLabel.setPadding(new Insets(30.0));
        banner.getChildren().add(bannerLabel);

        return banner;
    }

    public Scene makeInitUI() throws FileNotFoundException {
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(600, 400);
        rootPane.setStyle("-fx-background-color: eeeeee;");

        //banner
        rootPane.setTop(createBanner("Get started..."));

        //buttons
        VBox buttonBox = new VBox();
        buttonBox.setSpacing(30.0);
        buttonBox.setPadding(new Insets(80, 0, 0, 150));
        ArrayList<Button> buttons = new ArrayList<Button>();

        /*Button aloneButton = new Button("Draw on your own");
        aloneButton.setOnAction(Event -> {

        });*/
        Button serverButton = new Button("Start a new session");
        serverButton.setOnAction(Event -> {
            try {
                primaryStage.setScene(makeClientUI());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            primaryStage.setTitle("Client");
            primaryStage.show();
            try {
                clientActionHandler.startServerApplication(serverApplication);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
        Button clientButton = new Button("Join an existing session");
        clientButton.setOnAction(Event -> {
            primaryStage.close();
            try {
                primaryStage.setScene(makeClientUI());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            primaryStage.setTitle("Client");
            primaryStage.show();
        });

        //buttons.add(aloneButton);
        buttons.add(serverButton);
        buttons.add(clientButton);
        for (Button button : buttons) {
            button.setPrefSize(300.0, 40.0);
            button.setFont(font);
            buttonBox.getChildren().add(button);
        }

        rootPane.setCenter(buttonBox);

        return new Scene(rootPane);
    }

    public Scene makeClientUI() throws FileNotFoundException {
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(600, 450);
        rootPane.setStyle("-fx-background-color: #eeeeee");

        //banner
        rootPane.setTop(createBanner("Join an existing session..."));

        //main elements
        ArrayList<TextField> textFields = new ArrayList<>();
        TextField userNameTextField = new TextField();
        TextField ipAddressTextField = new TextField();
        TextField portNumberTextField = new TextField();
        textFields.add(userNameTextField);
        textFields.add(ipAddressTextField);
        textFields.add(portNumberTextField);
        for(TextField textField : textFields) {
            textField.setPrefWidth(200.0);
            textField.setFont(font);
        }

        ArrayList<Label> labels = new ArrayList<>();
        Label userNameLabel = new Label("User name");
        Label ipAddressLabel = new Label("IP address");
        Label portNumberLabel = new Label("Port number");
        labels.add(userNameLabel);
        labels.add(ipAddressLabel);
        labels.add(portNumberLabel);
        for(Label label : labels) {
            label.setPrefWidth(100);
            label.setFont(font);
            label.setPadding(new Insets(0, 0, 0, 10));
        }

        Button submitButton = new Button("Done");
        submitButton.setPrefSize(100, 40);

        Label errorLabel = new Label();
        errorLabel.setTextFill(Color.color(1, 0, 0));
        errorLabel.setWrapText(true);

        //main layout
        VBox mainBox = new VBox();
        mainBox.setPadding(new Insets(20, 100, 20, 100));

        ArrayList<HBox> hBoxes = new ArrayList<>();
        HBox hBox1 = new HBox();
        HBox hBox2 = new HBox();
        HBox hBox3 = new HBox();
        HBox hBox4 = new HBox();
        HBox hBox5 = new HBox();
        hBoxes.add(hBox1);
        hBoxes.add(hBox2);
        hBoxes.add(hBox3);
        hBoxes.add(hBox4);
        hBoxes.add(hBox5);
        for(HBox hBox : hBoxes) {
            hBox.setAlignment(Pos.CENTER);
            hBox.setPrefHeight(100);
        }
        hBox1.setPrefHeight(60);
        hBox5.setSpacing(50);
        mainBox.getChildren().addAll(hBox1, hBox2, hBox3, hBox4, hBox5);

        hBox1.getChildren().add(errorLabel);
        hBox2.getChildren().addAll(userNameTextField, userNameLabel);
        hBox3.getChildren().addAll(ipAddressTextField, ipAddressLabel);
        hBox4.getChildren().addAll(portNumberTextField, portNumberLabel);
        hBox5.getChildren().add(submitButton);

        //submit button
        submitButton.setOnAction(Event -> {
                boolean successfulSubmit = clientActionHandler.submitClientInfo(
                        ipAddressTextField.getText(),
                        Integer.parseInt(portNumberTextField.getText()),
                        userNameTextField.getText(),
                        errorLabel);

                if (successfulSubmit) {
                    //change scene
                    primaryStage.close();
                    primaryStage.setScene(makePaintUI(clientNetInterface));
                    primaryStage.setTitle("Client: " + clientNetInterface.getName());
                    primaryStage.show();
                }
            });

        rootPane.setCenter(mainBox);

        //return scene
        return new Scene(rootPane);
    }

    protected Scene makePaintUI(ClientNetInterface clientNetInterface) {
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(windowSizeX, windowSizeY);
        rootPane.setStyle("-fx-background-color: #eeeeee");

        //canvas
        double minStrokeWidth = 0.5d;
        double maxStrokeWidth = 30.0d;

        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2.0);
        gc.setLineCap(StrokeLineCap.ROUND);
        canvas.setStyle("-fx-background-color: #eeeeee");
        rootPane.setCenter(canvas);

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                clientActionHandler.mouseAction(UserAction.PRESS, event.getX(),event.getY());
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                clientActionHandler.mouseAction(UserAction.DRAG, event.getX(),event.getY());
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                clientActionHandler.mouseAction(UserAction.RELEASE, event.getX(),event.getY());
            }
        });

        //Toolbar
        HBox toolbar = new HBox();
        toolbar.setPrefHeight(toolbarSizeY);
        toolbar.setStyle("-fx-background-color: #dddddd");
        toolbar.setPadding(new Insets(7, 0, 0, 20));
        toolbar.setSpacing(14);
        rootPane.setTop(toolbar);

        Label widthDisplay = new Label(String.valueOf(gc.getLineWidth()));

        Slider strokeWidthSlider = new Slider();
        strokeWidthSlider.setPadding(new Insets(6,0,0,0));
        strokeWidthSlider.setMin(minStrokeWidth);
        strokeWidthSlider.setMax(maxStrokeWidth);
        strokeWidthSlider.setOnMouseReleased(e -> {
            gc.setLineWidth((strokeWidthSlider.getValue()));
            widthDisplay.setText(String.valueOf(Math.round(strokeWidthSlider.getValue())));

        });

        Button clearButton = new Button("Clear");
        clearButton.setFocusTraversable(false);
        clearButton.setStyle("-fx-background-color: transparent");
        clearButton.setOnAction(e -> {

            clientActionHandler.clearButton();

        });

        Button fillButton = new Button("Fill");
        fillButton.setFocusTraversable(false);
        fillButton.setStyle("-fx-background-color: transparent");
        fillButton.setOnAction(e -> {
            gc.setFill(gc.getStroke());
            gc.fill();
        });

        Button saveButton = new Button("Save");
        saveButton.setFocusTraversable(false);
        saveButton.setStyle("-fx-background-color: transparent");
        saveButton.setOnAction(e -> clientActionHandler.saveButton(canvas));

        Button undoButton = new Button("Undo");
        undoButton.setFocusTraversable(false);
        undoButton.setStyle("-fx-background-color: transparent");
        undoButton.setOnAction(e -> clientActionHandler.undoButton());

        Button colorChangeBlack = new Button();
        setupColorButton(colorChangeBlack, Color.BLACK);

        Button colorChangeRed = new Button();
        setupColorButton(colorChangeRed, Color.RED);

        Button colorChangeOrange = new Button();
        setupColorButton(colorChangeOrange, Color.ORANGE);

        Button colorChangeYellow = new Button();
        setupColorButton(colorChangeYellow, Color.YELLOW);

        Button colorChangeGreen = new Button();
        setupColorButton(colorChangeGreen, Color.GREEN);

        Button colorChangeBlue = new Button();
        setupColorButton(colorChangeBlue, Color.BLUE);

        Button colorChangePurple = new Button();
        setupColorButton(colorChangePurple, Color.PURPLE);


        ListView<String> chatListView = new ListView<String>();
        chatListView.setItems(clientNetInterface.getChatLog());
        toolbar.getChildren().addAll(saveButton, clearButton, fillButton, undoButton, colorChangeBlack, colorChangeRed, colorChangeOrange, colorChangeYellow, colorChangeGreen, colorChangeBlue, colorChangePurple, strokeWidthSlider, widthDisplay);
        //toolbar.getChildren().add(chatListView);
        functionHandler.getFunctionButtons().forEach(e->toolbar.getChildren().add(e));



        Scene scene = new Scene(rootPane);
        return scene;
    }

    private void setupColorButton(Button button, Color color) {
        Rectangle buttonColorRect = new Rectangle(20, 20);

        button.setFocusTraversable(false);
        buttonColorRect.setFill(color);
        button.setGraphic(buttonColorRect);
        button.setBackground(null);

        button.setOnAction(e -> gc.setStroke(color));
    }
}
