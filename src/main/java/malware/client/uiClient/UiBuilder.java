package malware.client.uiClient;

import javafx.collections.ListChangeListener;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeLineCap;
import javafx.stage.Stage;
import malware.client.ClientNetInterface;
import malware.client.UserAction;
import malware.client.malFunctions.FunctionHandler;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

public class UiBuilder {

    private static final Logger log = LogManager.getLogger(UiBuilder.class);
    ClientNetInterface clientNetInterface;
    ActionHandler actionHandler;
    FunctionHandler functionHandler;
    Stage primaryStage;

    GraphicsContext gc;
    Canvas canvas;

    double windowSizeX = 1080.0d;
    double windowSizeY = 720.0d;
    double toolbarSizeY = 40.0d;


    public UiBuilder(Stage primaryStage, ActionHandler actionHandler, Canvas canvas, ClientNetInterface clientNetInterface, FunctionHandler functionHandler) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.canvas = canvas;
        this.functionHandler = functionHandler;
        canvas.setWidth(windowSizeX);
        canvas.setHeight(windowSizeY - toolbarSizeY);
        gc = canvas.getGraphicsContext2D();
        this.actionHandler = actionHandler;

    }

    public Scene makeInitScene(Stage primaryStage) {
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(400, 400);
        rootPane.setStyle("-fx-background-color: #eeeeee");

        HBox header = new HBox();
        header.setPrefHeight(40.0);
        header.setStyle("-fx-background-color: #dddddd");
        Label label = new Label("Join an existing session...");
        header.getChildren().add(label);
        header.setPadding(new Insets(12, 0, 0, 20));
        rootPane.setTop(header);

        //text fields
        TextField nameField = new TextField();
        TextField hostNameField = new TextField();
        TextField portNumberField = new TextField();

        Label nameLabel = new Label("Name ");
        Label hostNameLabel = new Label("IP Address");
        Label portNumberLabel = new Label("Port ");
        Label errorLabel = new Label();

        VBox ui = new VBox();
        ui.getChildren().add(nameLabel);
        ui.getChildren().add(nameField);
        ui.getChildren().add(hostNameLabel);
        ui.getChildren().add(hostNameField);
        ui.getChildren().add(portNumberLabel);
        ui.getChildren().add(portNumberField);
        ui.getChildren().add(errorLabel);
        ui.setSpacing(6);
        ui.setPadding(new Insets(60, 100, 0, 100));

        //submit button
        Button submitClientInfoButton = new Button("Done");
        submitClientInfoButton.setOnAction(
                Event -> {

                    boolean successfullSubmit = actionHandler.submitClientInfo(hostNameField.getText(),
                            Integer.parseInt(portNumberField.getText()),
                            nameField.getText(),
                            errorLabel);

                    if (successfullSubmit) {
                        //change scene
                        primaryStage.close();
                        primaryStage.setScene(makePaintUI(clientNetInterface));
                        primaryStage.setTitle("Client: " + clientNetInterface.getName());
                        primaryStage.show();

                    }
                }
        );

        ui.getChildren().add(submitClientInfoButton);
        rootPane.setCenter(ui);

        //return scene
        return new Scene(rootPane);
    }

    protected Scene makePaintUI(ClientNetInterface clientNetInterface) {
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(windowSizeX, windowSizeY);
        rootPane.setStyle("-fx-background-color: #eeeeee");

        //canvas
        double minStrokeWidth = 0.5d;
        double maxStrokeWidth = 30.0d;

        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2.0);
        gc.setLineCap(StrokeLineCap.ROUND);
        canvas.setStyle("-fx-background-color: #eeeeee");
        rootPane.setCenter(canvas);

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                actionHandler.mouseAction(UserAction.PRESS, event.getX(),event.getY());
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                actionHandler.mouseAction(UserAction.DRAG, event.getX(),event.getY());
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                actionHandler.mouseAction(UserAction.RELEASE, event.getX(),event.getY());
            }
        });

        //Toolbar
        HBox toolbar = new HBox();
        toolbar.setPrefHeight(toolbarSizeY);
        toolbar.setStyle("-fx-background-color: #dddddd");
        toolbar.setPadding(new Insets(7, 0, 0, 20));
        toolbar.setSpacing(14);
        rootPane.setTop(toolbar);

        Label widthDisplay = new Label(String.valueOf(gc.getLineWidth()));

        Slider strokeWidthSlider = new Slider();
        strokeWidthSlider.setPadding(new Insets(6,0,0,0));
        strokeWidthSlider.setMin(minStrokeWidth);
        strokeWidthSlider.setMax(maxStrokeWidth);
        strokeWidthSlider.setOnMouseReleased(e -> {
            gc.setLineWidth((strokeWidthSlider.getValue()));
            widthDisplay.setText(String.valueOf(Math.round(strokeWidthSlider.getValue())));

        });

        Button clearButton = new Button("Clear");
        clearButton.setFocusTraversable(false);
        clearButton.setStyle("-fx-background-color: transparent");
        clearButton.setOnAction(e -> {
            gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
            clientNetInterface.getPaintLog().clear();
        });

        Button fillButton = new Button("Fill");
        fillButton.setFocusTraversable(false);
        fillButton.setStyle("-fx-background-color: transparent");
        fillButton.setOnAction(e -> {
            gc.setFill(gc.getStroke());
            gc.fill();
        });

        Button saveButton = new Button("Save");
        saveButton.setFocusTraversable(false);
        saveButton.setStyle("-fx-background-color: transparent");
        saveButton.setOnAction(e -> actionHandler.saveButton(canvas));

        Button undoButton = new Button("Undo");
        undoButton.setFocusTraversable(false);
        undoButton.setStyle("-fx-background-color: transparent");
        undoButton.setOnAction(e -> actionHandler.undo());

        Button redoButton = new Button("Redo");
        redoButton.setFocusTraversable(false);
        redoButton.setStyle("-fx-background-color: transparent");
        redoButton.setOnAction(e -> actionHandler.redo());

        Button colorChangeBlack = new Button();
        setupColorButton(colorChangeBlack, Color.BLACK);

        Button colorChangeRed = new Button();
        setupColorButton(colorChangeRed, Color.RED);

        Button colorChangeOrange = new Button();
        setupColorButton(colorChangeOrange, Color.ORANGE);

        Button colorChangeYellow = new Button();
        setupColorButton(colorChangeYellow, Color.YELLOW);

        Button colorChangeGreen = new Button();
        setupColorButton(colorChangeGreen, Color.GREEN);

        Button colorChangeBlue = new Button();
        setupColorButton(colorChangeBlue, Color.BLUE);

        Button colorChangePurple = new Button();
        setupColorButton(colorChangePurple, Color.PURPLE);


        ListView<String> chatListView = new ListView<String>();
        chatListView.setItems(clientNetInterface.getChatLog());
        toolbar.getChildren().addAll(saveButton, clearButton, fillButton, undoButton, redoButton, colorChangeBlack, colorChangeRed, colorChangeOrange, colorChangeYellow, colorChangeGreen, colorChangeBlue, colorChangePurple, strokeWidthSlider, widthDisplay);
        //toolbar.getChildren().add(chatListView);
        functionHandler.getFunctionButtons().forEach(e->toolbar.getChildren().add(e));




        clientNetInterface.getPaintLog().addListener((ListChangeListener<String>) change -> actionHandler.onServerMessage());

        Scene scene = new Scene(rootPane);
        return scene;
    }

    private void setupColorButton(Button button, Color color) {
        Rectangle buttonColorRect = new Rectangle(20, 20);

        button.setFocusTraversable(false);
        buttonColorRect.setFill(color);
        button.setGraphic(buttonColorRect);
        button.setBackground(null);

        button.setOnAction(e -> gc.setStroke(color));
    }
}
