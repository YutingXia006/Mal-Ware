package malware.client.uiClient;

import javafx.collections.ListChangeListener;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.image.WritableImage;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeLineCap;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import malware.client.ClientNetInterface;

import javax.imageio.ImageIO;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.Arrays;

public class UiBuilder {

    Stage primaryStage;

    GraphicsContext gc;
    ArrayList<Thread> threads;

    String drawingString;
    public UiBuilder(Stage primaryStage, ArrayList<Thread> threads) {
        this.primaryStage = primaryStage;
        this.threads = threads;
    }
    public Scene makeInitScene(Stage primaryStage) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setVgap(30);
        rootPane.setHgap(10);
        rootPane.setAlignment(Pos.CENTER);

        //text fields
        TextField nameField = new TextField();
        TextField hostNameField = new TextField();
        TextField portNumberField = new TextField();

        Label nameLabel = new Label("Name ");
        Label hostNameLabel = new Label("IP Address");
        Label portNumberLabel = new Label("Port ");
        Label errorLabel = new Label();

        //submit button
        Button submitClientInfoButton = new Button("Done");
        submitClientInfoButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent Event) {
                // Instantiate the client class and start its thread
                ClientNetInterface clientNetInterface;
                try {
                    clientNetInterface = new ClientNetInterface(hostNameField.getText(), Integer.parseInt(portNumberField.getText()), nameField.getText());
                    Thread clientThread = new Thread(clientNetInterface);
                    clientThread.setDaemon(true);
                    clientThread.start();
                    threads.add(clientThread);

                    //change scene
                    primaryStage.close();
                    primaryStage.setScene(makePaintUI(clientNetInterface));
                    primaryStage.setTitle("Client: " + clientNetInterface.getName());
                    primaryStage.show();
                }
                catch(ConnectException e){
                    errorLabel.setTextFill(Color.RED);
                    errorLabel.setText("Invalid host name, try again");
                }
                catch (NumberFormatException | IOException e) {
                    errorLabel.setTextFill(Color.RED);
                    errorLabel.setText("Invalid port number, try again");
                }

            }
        });

        //add components to root
        rootPane.add(nameField, 0, 0);
        rootPane.add(nameLabel, 1, 0);
        rootPane.add(hostNameField, 0, 1);
        rootPane.add(hostNameLabel, 1, 1);
        rootPane.add(portNumberField, 0, 2);
        rootPane.add(portNumberLabel, 1, 2);
        rootPane.add(submitClientInfoButton, 0, 3, 2, 1);
        rootPane.add(errorLabel, 0, 4);

        //return scene
        return new Scene(rootPane, 400, 400);
    }
    protected Scene makePaintUI(ClientNetInterface clientNetInterface) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setAlignment(Pos.CENTER);
        rootPane.setHgap(10);
        rootPane.setVgap(10);

        //canvas
        int windowSizeX = 1080;
        int windowSizeY = 600;
        Canvas canvas = new Canvas(windowSizeX, windowSizeY - 100);

        double minStrokeWidth = 0.5d;
        double maxStrokeWidth = 40.0d;

        gc = canvas.getGraphicsContext2D();
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2.0);
        gc.setLineCap(StrokeLineCap.ROUND);
        canvas.setStyle("-fx-alignment: bottom_center");
        canvas.setStyle("-fx-border-width: 10");

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                String color = (gc.getStroke().toString() + ":");
                String lineWidth = (gc.getLineWidth() + ":");
                drawingString =(clientNetInterface.getName()+":press:" + color + lineWidth + event.getX()+","+event.getY());
                gc.beginPath();
                gc.moveTo(event.getX(), event.getY());
                gc.stroke();
                clientNetInterface.writeToServer(drawingString);
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                String color = (gc.getStroke().toString() + ":");
                String lineWidth = (gc.getLineWidth() + ":");
                drawingString =(clientNetInterface.getName()+":drag:" + color + lineWidth + event.getX()+","+event.getY());
                gc.lineTo(event.getX(), event.getY());
                gc.stroke();
                clientNetInterface.writeToServer(drawingString);
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                String color = (gc.getStroke().toString() + ":");
                String lineWidth = (gc.getLineWidth() + ":");
                drawingString =(clientNetInterface.getName()+":release:" + color + lineWidth + event.getX()+","+event.getY());
                System.out.println(drawingString);
                clientNetInterface.writeToServer(drawingString);
                gc.stroke();
                gc.closePath();
            }
        });

        //Toolbar
        HBox toolbar = new HBox();
        toolbar.setPrefHeight(100);

        Slider strokeWidthSlider = new Slider();
        strokeWidthSlider.setMin(minStrokeWidth);
        strokeWidthSlider.setMax(maxStrokeWidth);
        strokeWidthSlider.setOnMouseReleased(e -> {
            gc.setLineWidth((strokeWidthSlider.getValue()));
        });

        Button clearButton = new Button("Clear");
        clearButton.setFocusTraversable(false);
        clearButton.setOnAction(e -> {
            gc.clearRect(0, 0, windowSizeX, windowSizeY);
        });

        Button fillButton = new Button("Fill");
        fillButton.setFocusTraversable(false);
        fillButton.setOnAction(e -> {
            gc.setFill(gc.getStroke());
            gc.fill();
        });

        Button saveButton = new Button("Save");
        saveButton.setFocusTraversable(false);
        saveButton.setOnAction(e -> {
            FileChooser savefile = new FileChooser();
            savefile.setTitle("Save File");
            savefile.setInitialFileName("meisterwerk");
            FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.png");
            savefile.getExtensionFilters().add(extFilter);

            File file = savefile.showSaveDialog(primaryStage);
            System.out.println("is file null ? "+ file);
            if (file != null) {
                try {
                    WritableImage writableImage = new WritableImage(windowSizeX, windowSizeY);
                    canvas.snapshot(null, writableImage);
                    RenderedImage renderedImage = SwingFXUtils.fromFXImage(writableImage, null);
                    ImageIO.write(renderedImage, "png", file);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    System.out.println("Error!");
                }
            }
        });

        Button colorChangeBlack = new Button();
        setupColorButton(colorChangeBlack, Color.BLACK);

        Button colorChangeBlue = new Button();
        setupColorButton(colorChangeBlue, Color.BLUE);

        Button colorChangeRed = new Button();
        setupColorButton(colorChangeRed, Color.RED);

        Button colorChangeGreen = new Button();
        setupColorButton(colorChangeGreen, Color.GREEN);

        Button networkSend = new Button();
        networkSend.setText("Send Message");
        networkSend.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                drawingString = "";
                drawingString = ((int) (Math.random() * windowSizeX) + ",");
                drawingString += ((int) (Math.random() * windowSizeY) + ",");
                drawingString += ((int) (Math.random() * windowSizeX) + ",");
                drawingString += ((int) (Math.random() * windowSizeY) + "\n");
                clientNetInterface.writeToServer(clientNetInterface.getName()+":"+drawingString);
                //client.chatLog.add(string);
                //client.paintLog.add(string);
            }
        });

        toolbar.setAlignment(Pos.CENTER);
        toolbar.setStyle("-fx-background-color: #404040");

        toolbar.getChildren().addAll(clearButton, fillButton, saveButton, colorChangeBlack, colorChangeBlue, colorChangeRed, colorChangeGreen, networkSend, strokeWidthSlider);

        BorderPane root = new BorderPane();
        root.setTop(toolbar);
        root.setCenter(canvas);
        root.setBottom(null);

        //Make the Chat's listView and set it's source to the Client's chatLog ArrayList
        ListView<String> chatListView = new ListView<String>();
        chatListView.setItems(clientNetInterface.chatLog);
        toolbar.getChildren().add(chatListView);
        clientNetInterface.paintLog.addListener(new ListChangeListener<String>() {
            @Override
            public void onChanged(Change<? extends String> change) {
                //System.out.println(client.paintLog.get(client.paintLog.size()-1));

                if (clientNetInterface.paintLog.size() > 0) {
                    String message = clientNetInterface.paintLog.get(clientNetInterface.paintLog.size()-1);
                    System.out.println(message);
                    if(!message.startsWith(clientNetInterface.getName())) {
                        String[] completeInstruction = message.split(":");
                        String strokeColor = completeInstruction[2];
                        String lineWidth = completeInstruction[3];
                        gc.setStroke(Paint.valueOf(strokeColor));
                        gc.setLineWidth(Double.valueOf(lineWidth));
                        String[] coords = completeInstruction[4].split(",");
                        String instructionName = completeInstruction[1];
                        switch (instructionName){
                            case "press":
                                gc.beginPath();
                                gc.moveTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                                gc.stroke();
                                break;

                            case "drag":
                                gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                                gc.stroke();
                                break;

                            case "release":
                                gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                                gc.stroke();
                                gc.closePath();
                        }

                    }
                }
            }
        });

        //Make and return the scene
        Scene scene = new Scene(root, windowSizeX, windowSizeY);
        return scene;
    }

    private void setupColorButton(Button button, Color color) {
        Rectangle buttonColorRect = new Rectangle(20, 20);

        button.setFocusTraversable(false);
        buttonColorRect.setFill(color);
        button.setGraphic(buttonColorRect);
        button.setBackground(null);

        button.setOnAction(e -> {
            gc.setStroke(color);
        });
    }
}
