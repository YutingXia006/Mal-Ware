package malware.client.uiClient;

import javafx.collections.ListChangeListener;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeLineCap;
import javafx.stage.Stage;
import malware.client.ClientNetInterface;
import malware.client.malFunctions.ActionHandler;

import java.util.ArrayList;

public class UiBuilder {

    ClientNetInterface clientNetInterface;
    ActionHandler actionHandler;
    Stage primaryStage;

    GraphicsContext gc;
    Canvas canvas;
    ArrayList<Thread> threads;



    public UiBuilder(Stage primaryStage, ClientNetInterface clientNetInterface, ArrayList<Thread> threads) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.threads = threads;
        int windowSizeX = 1080;
        int windowSizeY = 600;
        canvas = new Canvas(windowSizeX, windowSizeY - 100);
        gc = canvas.getGraphicsContext2D();
        actionHandler = new ActionHandler(primaryStage, clientNetInterface, threads, gc);
    }

    public Scene makeInitScene(Stage primaryStage) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setVgap(30);
        rootPane.setHgap(10);
        rootPane.setAlignment(Pos.CENTER);

        //text fields
        TextField nameField = new TextField();
        TextField hostNameField = new TextField();
        TextField portNumberField = new TextField();

        Label nameLabel = new Label("Name ");
        Label hostNameLabel = new Label("IP Address");
        Label portNumberLabel = new Label("Port ");
        Label errorLabel = new Label();

        //submit button
        Button submitClientInfoButton = new Button("Done");
        submitClientInfoButton.setOnAction(
                Event -> {

                    boolean successfullSubmit = actionHandler.submitClientInfo(hostNameField.getText(),
                            Integer.parseInt(portNumberField.getText()),
                            nameField.getText(),
                            errorLabel);

                    if (successfullSubmit) {
                        //change scene
                        primaryStage.close();
                        primaryStage.setScene(makePaintUI(clientNetInterface));
                        primaryStage.setTitle("Client: " + clientNetInterface.getName());
                        primaryStage.show();

                    }
                }
        );

        //add components to root
        rootPane.add(nameField, 0, 0);
        rootPane.add(nameLabel, 1, 0);
        rootPane.add(hostNameField, 0, 1);
        rootPane.add(hostNameLabel, 1, 1);
        rootPane.add(portNumberField, 0, 2);
        rootPane.add(portNumberLabel, 1, 2);
        rootPane.add(submitClientInfoButton, 0, 3, 2, 1);
        rootPane.add(errorLabel, 0, 4);

        //return scene
        return new Scene(rootPane, 400, 400);
    }

    protected Scene makePaintUI(ClientNetInterface clientNetInterface) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setAlignment(Pos.CENTER);
        rootPane.setHgap(10);
        rootPane.setVgap(10);

        //canvas

        double minStrokeWidth = 0.5d;
        double maxStrokeWidth = 40.0d;


        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2.0);
        gc.setLineCap(StrokeLineCap.ROUND);
        canvas.setStyle("-fx-alignment: bottom_center");
        canvas.setStyle("-fx-border-width: 10");

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            actionHandler.mousePressed(event);
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, event -> {
            actionHandler.mouseDragged(event);
        });

        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> {
            actionHandler.mouseReleased(event);
        });

        //Toolbar
        HBox toolbar = new HBox();
        toolbar.setPrefHeight(100);

        Slider strokeWidthSlider = new Slider();
        strokeWidthSlider.setMin(minStrokeWidth);
        strokeWidthSlider.setMax(maxStrokeWidth);
        strokeWidthSlider.setOnMouseReleased(e -> {
            gc.setLineWidth((strokeWidthSlider.getValue()));
        });

        Button clearButton = new Button("Clear");
        clearButton.setFocusTraversable(false);
        clearButton.setOnAction(e -> {
            gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());

        });

        Button fillButton = new Button("Fill");
        fillButton.setFocusTraversable(false);
        fillButton.setOnAction(e -> {
            gc.setFill(gc.getStroke());
            gc.fill();
        });

        Button saveButton = new Button("Save");
        saveButton.setFocusTraversable(false);
        saveButton.setOnAction(e -> actionHandler.saveButton(canvas));

        Button undoButton = new Button("Undo");
        undoButton.setFocusTraversable(false);
        undoButton.setOnAction(e -> actionHandler.undo());

        Button redoButton = new Button("Redo");
        redoButton.setFocusTraversable(false);
        redoButton.setOnAction(e -> actionHandler.redo());

        Button colorChangeBlack = new Button();
        setupColorButton(colorChangeBlack, Color.BLACK);

        Button colorChangeBlue = new Button();
        setupColorButton(colorChangeBlue, Color.BLUE);

        Button colorChangeRed = new Button();
        setupColorButton(colorChangeRed, Color.RED);

        Button colorChangeGreen = new Button();
        setupColorButton(colorChangeGreen, Color.GREEN);


        toolbar.setAlignment(Pos.CENTER);
        toolbar.setStyle("-fx-background-color: #404040");

        BorderPane root = new BorderPane();
        root.setTop(toolbar);
        root.setCenter(canvas);
        root.setBottom(null);

        //Make the Chat's listView and set it's source to the Client's chatLog ArrayList
        ListView<String> chatListView = new ListView<String>();
        chatListView.setItems(clientNetInterface.chatLog);
        toolbar.getChildren().addAll(clearButton, fillButton, saveButton, undoButton, redoButton, colorChangeBlack, colorChangeBlue, colorChangeRed, colorChangeGreen, strokeWidthSlider);
        toolbar.getChildren().add(chatListView);

        clientNetInterface.paintLog.addListener((ListChangeListener<String>) change -> actionHandler.onServerMessage());


        Scene scene = new Scene(root, canvas.getWidth(), canvas.getHeight());
        return scene;
    }

    private void setupColorButton(Button button, Color color) {
        Rectangle buttonColorRect = new Rectangle(20, 20);

        button.setFocusTraversable(false);
        buttonColorRect.setFill(color);
        button.setGraphic(buttonColorRect);
        button.setBackground(null);

        button.setOnAction(e -> {
            gc.setStroke(color);
        });
    }
}
