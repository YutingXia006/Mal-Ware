package malware.client.uiClient;

import javafx.embed.swing.SwingFXUtils;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import malware.client.CanvasPainter;
import malware.client.ClientNetInterface;
import malware.UserAction;
import malware.client.malFunctions.FunctionHandler;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.imageio.ImageIO;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.net.ConnectException;
import java.util.*;

public class ActionHandler {
    private static final Logger log = LogManager.getLogger(ActionHandler.class);
    private FunctionHandler functionHandler;
    private ClientNetInterface clientNetInterface;

    private CanvasPainter painter;
    private Stage primaryStage;
    private ArrayList<Thread> threads;
    private GraphicsContext gc;
    private int historyIndex = 0;






    protected void undoButton() {
        drawWithPainter(historyIndex,UserAction.BUTTON_UNDO,0,0,true);

    }



    public ActionHandler(Stage primaryStage, ClientNetInterface clientNetInterface, CanvasPainter painter, ArrayList<Thread> threads, GraphicsContext gc, FunctionHandler functionHandler) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.threads = threads;
        this.gc = gc;
        this.painter = painter;
        this.functionHandler = functionHandler;
    }

    protected boolean submitClientInfo(String hostname, int port, String name, Label errorLabel) {
        // Instantiate the client class and start its thread
        boolean success;
        try {
            clientNetInterface.startInterface(hostname, port, name, this);
            Thread clientThread = new Thread(clientNetInterface);
            clientThread.setDaemon(true);
            clientThread.start();
            threads.add(clientThread);

            success = true;
        } catch (ConnectException e) {
            errorLabel.setTextFill(Color.RED);
            success = false;
            errorLabel.setText("Invalid host name, try again");
            log.error("Invalid host name");
        } catch (NumberFormatException | IOException e) {
            errorLabel.setTextFill(Color.RED);
            success = false;
            errorLabel.setText("Invalid port number, try again");
            log.error("Invalid port number");
        }
        return success;


    }

    protected void mouseAction(UserAction action, double x, double y) {

        if (action == UserAction.PRESS) {
            historyIndex++;
            gc.closePath();
            clientNetInterface.bufferServerInput();
        }




        String selectedFunction = functionHandler.getSelectedFunction();

        String drawingButtonName = functionHandler.getFunctionButtons().get(0).getText();



        boolean drawingButtonPressed = selectedFunction.equals(drawingButtonName);

        if(drawingButtonPressed){
            painter.applyAction(historyIndex,action,x,y,true);
        }else{

            functionHandler.takeOver(historyIndex,action, selectedFunction, x, y);

        }

        if(action == UserAction.RELEASE){
            gc.closePath();
            clientNetInterface.dismissServerBuffer();



        }


    }


    protected void saveButton(Canvas canvas) {
        {
            FileChooser savefile = new FileChooser();
            savefile.setTitle("Save File");
            savefile.setInitialFileName("meisterwerk");
            FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.png");
            savefile.getExtensionFilters().add(extFilter);

            File file = savefile.showSaveDialog(primaryStage);
            log.warn("Is file null? " + file);
            if (file != null) {
                try {
                    WritableImage writableImage = new WritableImage((int) canvas.getWidth(), (int) canvas.getHeight());
                    canvas.snapshot(null, writableImage);
                    RenderedImage renderedImage = SwingFXUtils.fromFXImage(writableImage, null);
                    ImageIO.write(renderedImage, "png", file);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    log.warn("Error!");
                }
            }
        }
    }

    public void onServerMessage() {
        if(clientNetInterface.getPaintLog().size()>0) {
            painter.applyServerInstruction(clientNetInterface.getPaintLog().size() - 1, true);
        }
    }



    private void drawWithPainter(int historyIndex, UserAction action, double x, double y, boolean sendToServer){
        painter.applyAction(historyIndex,action, x, y, sendToServer);
    }

    public void clearButton() {


            drawWithPainter(0,UserAction.BUTTON_CLEAR,0,0,true);
    }
}
