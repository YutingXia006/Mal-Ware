package malware.client.uiClient;

import javafx.embed.swing.SwingFXUtils;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.WritableImage;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import malware.client.CanvasPainter;
import malware.client.ClientNetInterface;
import malware.UserAction;
import malware.client.malFunctions.FunctionHandler;
import malware.server.ServerApplication;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.imageio.ImageIO;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.net.ConnectException;
import java.util.*;

public class ClientActionHandler {
    private static final Logger log = LogManager.getLogger(ClientActionHandler.class);
    private FunctionHandler functionHandler;
    private ClientNetInterface clientNetInterface;

    private CanvasPainter painter;
    private Stage primaryStage;
    private ArrayList<Thread> threads;
    private GraphicsContext gc;


    public ClientActionHandler(Stage primaryStage, ClientNetInterface clientNetInterface, CanvasPainter painter, ArrayList<Thread> threads, GraphicsContext gc, FunctionHandler functionHandler) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.threads = threads;
        this.gc = gc;
        this.painter = painter;
        this.functionHandler = functionHandler;
    }

    public void startServerApplication(ServerApplication serverApplication) {
        serverApplication.start(new Stage());
    }

    protected boolean submitClientInfo(String ipAddress, int port, String userName, Label errorLabel) {
        // Instantiate the client class and start its thread
        boolean success;
        try {
            if(userName.contains(":")) {
                success = false;
                errorLabel.setText("Invalid user name, must not contain ':'");
            } else {
                clientNetInterface.startInterface(ipAddress, port, userName, painter);
                Thread clientThread = new Thread(clientNetInterface);
                clientThread.setDaemon(true);
                clientThread.start();
                threads.add(clientThread);
                success = true;
            }
        } catch (ConnectException e) {
            success = false;
            errorLabel.setText("Invalid IP address, try again");
        } catch (NumberFormatException | IOException e) {
            success = false;
            errorLabel.setText("Invalid port number, try again");
        }
        return success;
    }

    protected void mouseAction(UserAction action, double x, double y) {
        if (action == UserAction.PRESS) {
            gc.closePath();
            clientNetInterface.bufferServerInput();
        }

        String selectedFunction = functionHandler.getSelectedFunction();
        String drawingButtonName = functionHandler.getFunctionButtons().get(0).getText();

        boolean drawingButtonPressed = selectedFunction.equals(drawingButtonName);

        if(drawingButtonPressed){
            painter.applyAction(action,x,y,true);
        }else{
            functionHandler.takeOver(action, selectedFunction, x, y);
        }

        if(action == UserAction.RELEASE){
            gc.closePath();
            clientNetInterface.dismissServerBuffer();
        }
    }

    protected void saveButton(Canvas canvas) {
        FileChooser saveFile = new FileChooser();
        saveFile.setTitle("Save File");
        saveFile.setInitialFileName("meisterwerk");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.png");
        saveFile.getExtensionFilters().add(extFilter);

        File file = saveFile.showSaveDialog(primaryStage);
        log.warn("Is file null? " + file);
        if (file != null) {
            try {
                WritableImage writableImage = new WritableImage((int) canvas.getWidth(), (int) canvas.getHeight());
                canvas.snapshot(null, writableImage);
                RenderedImage renderedImage = SwingFXUtils.fromFXImage(writableImage, null);
                ImageIO.write(renderedImage, "png", file);
            } catch (IOException ex) {
                ex.printStackTrace();
                log.warn("Error!");
            }
        }
    }

    protected void importButton(Canvas canvas) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Import Image");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif");
        fileChooser.getExtensionFilters().add(extFilter);

        File file = fileChooser.showOpenDialog(primaryStage);
        log.warn("Is file null? " + file);
        if (file != null) {
            try {
                Image image = new Image(file.toURI().toString());
                double canvasWidth = canvas.getWidth();
                double canvasHeight = canvas.getHeight();
                double imageWidth = image.getWidth();
                double imageHeight = image.getHeight();

                // Calculate the scale to fit the image inside the canvas without stretching.
                double scale = Math.min(canvasWidth / imageWidth, canvasHeight / imageHeight);

                // Calculate the centered position of the image on the canvas.
                double scaledImageWidth = imageWidth * scale;
                double scaledImageHeight = imageHeight * scale;
                double x = (canvasWidth - scaledImageWidth) / 2;
                double y = (canvasHeight - scaledImageHeight) / 2;

                GraphicsContext gc = canvas.getGraphicsContext2D();
                gc.clearRect(0, 0, canvasWidth, canvasHeight); // Clear the canvas before drawing.
                gc.drawImage(image, x, y, scaledImageWidth, scaledImageHeight);
            } catch (Exception ex) {
                ex.printStackTrace();
                log.warn("Error while importing the image!");
            }
        }
    }

    protected void undoButton() {
        applyWithPainter(UserAction.BUTTON_UNDO,0,0,true);
    }

    public void clearButton() {
        applyWithPainter(UserAction.BUTTON_CLEAR,0,0,true);
    }

    private void applyWithPainter(UserAction action, double x, double y, boolean sendToServer){
        painter.applyAction(action, x, y, sendToServer);
    }
}
