package malware.client.malFunctions;

import javafx.embed.swing.SwingFXUtils;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.image.WritableImage;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import malware.client.ClientNetInterface;

import javax.imageio.ImageIO;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.net.ConnectException;
import java.util.*;

public class ActionHandler{

    ClientNetInterface clientNetInterface;
    Stage primaryStage;
    ArrayList<Thread> threads;
    GraphicsContext gc;
    String drawingString;
    private int historyIndex = 0;
//    private String lastAction = null;

    public void redraw(int indexToStop){
        System.out.println("starting redraw");
        Canvas c = gc.getCanvas();
        gc.clearRect(0, 0, c.getWidth(), c.getHeight());
            for (int i = 0; i <= clientNetInterface.paintLog.size() - 1; i++) {
                String message = clientNetInterface.paintLog.get(i);
                String[] completeInstruction = message.split(":");
                String strokeColor = completeInstruction[3];
                String lineWidth = completeInstruction[4];
                gc.setStroke(Paint.valueOf(strokeColor));
                gc.setLineWidth(Double.parseDouble(lineWidth));
                String[] coords = completeInstruction[5].split(",");
                String instructionName = completeInstruction[2];
                switch (instructionName) {
                    case "press" -> {
                        gc.beginPath();
                        gc.moveTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                        gc.stroke();
                        System.out.println("press");
                    }
                    case "drag" -> {
                        gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                        gc.stroke();
                    }
                    case "release" -> {
                        gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                        gc.stroke();
                        gc.closePath();
                        System.out.println("release");
                        indexToStop++;
                    }
                }
                if(clientNetInterface.getLastHistoryIndex() <= 2){
                    if(indexToStop >= clientNetInterface.getLastHistoryIndex()) {
                        System.out.println("end redraw" + indexToStop);
                        break;
                    }
                }else if(clientNetInterface.getLastHistoryIndex() > 2){
                    if(indexToStop > clientNetInterface.getLastHistoryIndex()) {
                        System.out.println("end redraw" + indexToStop);
                        break;
                    }
                }

            }

        }

    //undoing last action need to implement (saving the action for redo and deleting from list)
    public void undo(){
        System.out.println(clientNetInterface.paintLog);
        if (historyIndex >=0){
            System.out.println("start undo" + historyIndex);
            redraw(historyIndex-1);
            System.out.println(historyIndex);
//            clientNetInterface.deleteLastActionFromPaintLog();
            System.out.println("end undo");
//            System.out.println(clientNetInterface.lastPainLog);
        } else {
            System.out.println("No Actions to undo");
        }
    }

    //redoing only last action
    public void redo(){
        if (historyIndex < clientNetInterface.paintLog.size()-1){
//            clientNetInterface.addLastActionToPaintLog();
            System.out.println(historyIndex);
            redraw(historyIndex-2);
        } else {
            System.out.println("No Actions to redo");
        }
    }


    public ActionHandler(Stage primaryStage, ClientNetInterface clientNetInterface, ArrayList<Thread> threads, GraphicsContext gc) {
        this.primaryStage = primaryStage;
        this.clientNetInterface = clientNetInterface;
        this.threads = threads;
        this.gc = gc;
    }

    public boolean submitClientInfo(String hostname, int port, String name, Label errorLabel) {
        // Instantiate the client class and start its thread
        boolean success;
        try {
            clientNetInterface.startInterface(hostname, port, name);
            Thread clientThread = new Thread(clientNetInterface);
            clientThread.setDaemon(true);
            clientThread.start();
            threads.add(clientThread);

            success = true;
        } catch (ConnectException e) {
            errorLabel.setTextFill(Color.RED);
            success = false;
            errorLabel.setText("Invalid host name, try again");
        } catch (NumberFormatException | IOException e) {
            errorLabel.setTextFill(Color.RED);
            success = false;
            errorLabel.setText("Invalid port number, try again");
        }
        return success;


    }

    public void mousePressed(MouseEvent event) {
        if (event.getButton() == MouseButton.PRIMARY) {
            historyIndex++;
            String color = (gc.getStroke().toString() + ":");
            String lineWidth = (gc.getLineWidth() + ":");
            drawingString = (historyIndex + ":" + clientNetInterface.getName() + ":press:" + color + lineWidth + event.getX() + "," + event.getY());
            gc.beginPath();
            gc.moveTo(event.getX(), event.getY());
            gc.stroke();
            clientNetInterface.writeToServer(drawingString);
        }
    }

    public void mouseDragged(MouseEvent event) {
        if (event.getButton() == MouseButton.PRIMARY) {
            String color = (gc.getStroke().toString() + ":");
            String lineWidth = (gc.getLineWidth() + ":");
            drawingString = (historyIndex + ":" + clientNetInterface.getName() + ":drag:" + color + lineWidth + event.getX() + "," + event.getY());
            gc.lineTo(event.getX(), event.getY());
            gc.stroke();
            clientNetInterface.writeToServer(drawingString);
        }
    }

    public void mouseReleased(MouseEvent event) {
        if (event.getButton() == MouseButton.PRIMARY) {
            String color = (gc.getStroke().toString() + ":");
            String lineWidth = (gc.getLineWidth() + ":");
            drawingString = (historyIndex + ":" + clientNetInterface.getName() + ":release:" + color + lineWidth + event.getX() + "," + event.getY());
            gc.stroke();
            gc.closePath();
            clientNetInterface.writeToServer(drawingString);
        }
//        clientNetInterface.paintLog.add(drawingString);
//        System.out.println(clientNetInterface.paintLog);
    }

    public void saveButton(Canvas canvas) {
        {
            FileChooser savefile = new FileChooser();
            savefile.setTitle("Save File");
            savefile.setInitialFileName("meisterwerk");
            FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.png");
            savefile.getExtensionFilters().add(extFilter);

            File file = savefile.showSaveDialog(primaryStage);
            System.out.println("is file null ? " + file);
            if (file != null) {
                try {
                    WritableImage writableImage = new WritableImage((int) canvas.getWidth(), (int) canvas.getHeight());
                    canvas.snapshot(null, writableImage);
                    RenderedImage renderedImage = SwingFXUtils.fromFXImage(writableImage, null);
                    ImageIO.write(renderedImage, "png", file);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    System.out.println("Error!");
                }
            }
        }
    }

    public void onServerMessage() {
            if (clientNetInterface.paintLog.size() > 0) {
                String message = clientNetInterface.paintLog.get(clientNetInterface.paintLog.size() - 1);
                System.out.println(message);
                String[] completeInstruction = message.split(":");
                if (!(clientNetInterface.getName().equals(completeInstruction[1]))) {
                    String strokeColor = completeInstruction[3];
                    String lineWidth = completeInstruction[4];
                    gc.setStroke(Paint.valueOf(strokeColor));
                    gc.setLineWidth(Double.parseDouble(lineWidth));
                    String[] coords = completeInstruction[5].split(",");
                    String instructionName = completeInstruction[2];
                    switch (instructionName) {
                        case "press" -> {
                            gc.beginPath();
                            gc.moveTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                            gc.stroke();
                        }
                        case "drag" -> {
                            gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                            gc.stroke();
                        }
                        case "release" -> {
                            gc.lineTo(Float.parseFloat(coords[0]), Float.parseFloat(coords[1]));
                            gc.stroke();
                            gc.closePath();
                        }
                    }
                }
            }
    }
}
