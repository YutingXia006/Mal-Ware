package malware.client;

import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Paint;
import malware.UserAction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class CanvasPainter {

    GraphicsContext gc;
    InstructionFactory instructionFactory;
    ClientNetInterface clientNetInterface;
    private static final Logger log = LogManager.getLogger(CanvasPainter.class);
    String drawingString;
    boolean pathClosed = true;


    public CanvasPainter(GraphicsContext gc, ClientNetInterface clientNetInterface) {

        this.gc = gc;
        this.clientNetInterface = clientNetInterface;
        instructionFactory = new InstructionFactory();
    }


    public void applyAction(UserAction action, double x, double y, boolean sendToServer) {

        if (action == UserAction.BUTTON_CLEAR) {

            clearCanvas(sendToServer);

        } else if (action == UserAction.BUTTON_UNDO) {

            undo(sendToServer);

        } else {
            if (UserAction.PRESS == action || pathClosed) {
                gc.beginPath();
                pathClosed = false;
                log.info("Painter: begin path");
            }

            gc.lineTo(x, y);
            log.info("Painter: line to " + x + " | " + y);


            gc.stroke();

            if (UserAction.RELEASE == action) {
                gc.closePath();
                pathClosed = true;
                log.info("Painter: closed path");

            }

            if (sendToServer) {
                drawToServer(action, x, y);
            }

        }


    }

    private void drawToServer(UserAction action, double x, double y) {
        drawingString = instructionFactory.createInstruction(
                clientNetInterface.getName(),
                action.toString(),
                gc.getStroke().toString(),
                String.valueOf(gc.getLineWidth()),
                x,
                y);

        clientNetInterface.writeToServer(drawingString);
    }

    public void applyServerInstruction(int instructionIndex, boolean ignoreRedraw) {


        if (clientNetInterface.getPaintLog().size() > 0) {


            String message = clientNetInterface.getPaintLog().get(instructionIndex);
            String[] completeInstruction = message.split(":");

            boolean serverForced = message.endsWith(":1") ? true : false;

            ignoreRedraw = serverForced ? true : ignoreRedraw;

            Paint rememberClientColor = gc.getStroke();
            double rememberClientWidth = gc.getLineWidth();


            // 0 historyIndex: 1 clientName : 2 action : 3 color : 4 lineWidth : 5 x,y (: 6 serverForced)
            if ((!clientNetInterface.getName().equals(completeInstruction[1])) || ignoreRedraw) {
                String instructionName = completeInstruction[2];
                String strokeColor = completeInstruction[3];
                String lineWidth = completeInstruction[4];
                gc.setStroke(Paint.valueOf(strokeColor));
                gc.setLineWidth(Double.parseDouble(lineWidth));
                String[] coords = completeInstruction[5].split(",");
                float x = Float.parseFloat(coords[0]);
                float y = Float.parseFloat(coords[1]);


                UserAction instructedAction = UserAction.getUserAction(instructionName);


                log.warn("Drawing from PaintLog:" + message);
                applyAction(instructedAction, x, y, false);
            }

            gc.setStroke(rememberClientColor);
            gc.setLineWidth(rememberClientWidth);
        }

    }

    public void clearCanvas(boolean sendToServer) {
        gc.clearRect(0, 0, gc.getCanvas().getWidth(), gc.getCanvas().getHeight());

        if (sendToServer) {
            clientNetInterface.writeToServer(
                    instructionFactory.createInstructionShort(
                            clientNetInterface.getName(),
                            UserAction.BUTTON_CLEAR
                    )
            );
        }


        clientNetInterface.clearPaintLog();
    }

    private void undo(boolean sendToServer) {

        if (sendToServer) {
            clientNetInterface.writeToServer(
                    instructionFactory.createInstructionShort(
                            clientNetInterface.getName(),
                            UserAction.BUTTON_UNDO
                    )
            );

        }
    }


}
