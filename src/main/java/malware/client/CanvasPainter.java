package malware.client;

import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Paint;
import malware.UserAction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class CanvasPainter {

    private final GraphicsContext gc;
    private final InstructionFactory instructionFactory;
    private final ClientNetInterface clientNetInterface;
    private static final Logger log = LogManager.getLogger(CanvasPainter.class);
    boolean pathClosed = true;


    public CanvasPainter(GraphicsContext gc, ClientNetInterface clientNetInterface) {

        this.gc = gc;
        this.clientNetInterface = clientNetInterface;
        instructionFactory = new InstructionFactory();
    }

    public GraphicsContext getGraphicsContext() {
        return gc;
    }


    public void applyAction(UserAction action, double x, double y, boolean sendToServer) {

        if (action == UserAction.BUTTON_CLEAR) {
            clearCanvas(sendToServer);
        } else if (action == UserAction.BUTTON_UNDO) {
            undo(sendToServer);
        } else {
            if (UserAction.PRESS == action || pathClosed) {
                gc.beginPath();
                pathClosed = false;
                log.info("Painter: begin path");
            }

            gc.lineTo(x, y);
            log.info("Painter: line to " + x + " | " + y);

            gc.stroke();

            if (UserAction.RELEASE == action) {
                gc.closePath();
                pathClosed = true;
                log.info("Painter: closed path");
            }

            if (sendToServer) {
                sendToServer(action, x, y);
            }
        }
    }

    private void sendToServer(UserAction action, double x, double y) {
        String drawingString = instructionFactory.createInstruction(
                clientNetInterface.getName(),
                action.toString(),
                gc.getStroke().toString(),
                String.valueOf(gc.getLineWidth()),
                x,
                y);

        clientNetInterface.writeToServer(drawingString);
    }

    public void applyServerInstruction(int instructionIndex, boolean ignoreRedraw) {

        if (clientNetInterface.getPaintLog().size() > 0) {

            String message = clientNetInterface.getPaintLog().get(instructionIndex);

            boolean serverForced = instructionFactory.isForcedByServer(message);
            ignoreRedraw = serverForced || ignoreRedraw;

            Paint rememberClientColor = gc.getStroke();
            double rememberClientWidth = gc.getLineWidth();

            String messageSource = instructionFactory.extractClientName(message);

            if ((!clientNetInterface.getName().equals(messageSource)) || ignoreRedraw) {
                String actionName = instructionFactory.extractAction(message);
                String strokeColor = instructionFactory.extractColor(message);
                String lineWidth = instructionFactory.extractLineWidth(message);
                gc.setStroke(Paint.valueOf(strokeColor));
                gc.setLineWidth(Double.parseDouble(lineWidth));
                String[] coords = instructionFactory.extractCoordinates(message).split(",");
                float x = Float.parseFloat(coords[0]);
                float y = Float.parseFloat(coords[1]);

                UserAction instructedAction = UserAction.getActionEnum(actionName);

                log.warn("Drawing from PaintLog:" + message);
                applyAction(instructedAction, x, y, false);
            }

            gc.setStroke(rememberClientColor);
            gc.setLineWidth(rememberClientWidth);
        }
    }

    public void clearCanvas(boolean sendToServer) {
        gc.clearRect(0, 0, gc.getCanvas().getWidth(), gc.getCanvas().getHeight());

        if (sendToServer) {
            clientNetInterface.writeToServer(
                    instructionFactory.createInstructionShort(
                            clientNetInterface.getName(),
                            UserAction.BUTTON_CLEAR
                    )
            );
        }


        clientNetInterface.clearPaintLog();
    }

    private void undo(boolean sendToServer) {

        if (sendToServer) {
            clientNetInterface.writeToServer(
                    instructionFactory.createInstructionShort(
                            clientNetInterface.getName(),
                            UserAction.BUTTON_UNDO
                    )
            );
        }
    }
}
