package malware.client;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import malware.client.malFunctions.BigSquareFunction;
import malware.client.uiClient.ActionHandler;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;


public class ClientNetInterface implements Runnable {
    private static final Logger log = LogManager.getLogger(BigSquareFunction.class);
    private Socket clientSocket;

    ActionHandler actionHandler;
    private BufferedReader serverToClientReader;
    private PrintWriter clientToServerWriter;
    private String name;
    public String getName() {
        return name;
    }


    private ObservableList<String> chatLog;

    public ObservableList<String> getChatLog() {
        return chatLog;
    }

    private ObservableList<String> paintLog;

    public ObservableList<String> getPaintLog() {
        return paintLog;
    }


    private List<String> paintLogBuffer;
    public ObservableList<String> lastPaintLog;

    public ClientNetInterface(){

    }
    private boolean clearing;
    private boolean serverInputBlocked = false;
    public boolean isServerInputBlocked(){
        return serverInputBlocked;
    }


    public void bufferServerInput(){
        serverInputBlocked = true;
    }

    public void dismissServerBuffer(){
        log.info("adding paintLogBuffer:");
        paintLogBuffer.forEach(e ->{
            paintLog.add(e);
        });
        paintLogBuffer.clear();

        allowServerInput();
    }

    public void allowServerInput(){
        serverInputBlocked = false;
    }

    public void startInterface(String hostName, int portNumber, String name, ActionHandler actionHandler) throws IOException {
        clientSocket = new Socket(hostName, portNumber);
        serverToClientReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        clientToServerWriter = new PrintWriter(clientSocket.getOutputStream(), true);
        chatLog = FXCollections.observableArrayList();
        paintLog = FXCollections.observableArrayList();
        paintLogBuffer = new ArrayList<>();
        lastPaintLog = FXCollections.observableArrayList();
        this.name = name;
        this.actionHandler = actionHandler;
        clientToServerWriter.println(name);

        refreshListener();



    }

    private void refreshListener() {
        paintLog.addListener((ListChangeListener<String>) change -> actionHandler.onServerMessage());
    }


    public void writeToServer(String input) {
        clientToServerWriter.println(input);
    }

    //looping through the paintLog to delete actions with the last index and adding them to lastPaintLog in reversed order
    public void deleteLastActionFromPaintLog() {
        lastPaintLog.clear();
        int lastHistoryIndex = getLastHistoryIndex();
        int i = paintLog.size()-1;
        for(; i>=0; i--){
            log.warn(i);
            log.warn(paintLog.size());
            if(getHistoryIndex(i) == lastHistoryIndex){
                lastPaintLog.add(paintLog.get(i));
                paintLog.remove(i);
            }
        }
        log.warn("Last action deleted");
}

    //reversing the order of lastPaintLog and adding it to paintLog
    public void addLastActionToPaintLog(){
        ObservableList<String> list = FXCollections.observableArrayList();
        int i = lastPaintLog.size()-1;
        for(; i >= 0; i--){
            list.add(lastPaintLog.get(i));
        }
        paintLog.addAll(list);
        log.warn("Last action added to paintLog");
    }

    public int getLastHistoryIndex(){
        String message = paintLog.get(paintLog.size()-1);
        String[] completeInstruction = message.split(":");
        int lastHistoryIndex = Integer.parseInt(completeInstruction[0]);
        return lastHistoryIndex;
    }

    public int getHistoryIndex(int i){
        String message = paintLog.get(i);
        String[] completeInstruction = message.split(":");
        int historyIndexOnI = Integer.parseInt(completeInstruction[0]);
        return historyIndexOnI;
    }

    public void run() {
        // Infinite loop to update the chat log from the server
        while (true) {
            try {
                final String inputFromServer = serverToClientReader.readLine();
                Platform.runLater(new Runnable() {
                    public void run() {
                        chatLog.add(name + " : " + inputFromServer);
                        if(serverInputBlocked){
                            paintLogBuffer.add(inputFromServer);
                        }else{
                            paintLog.add(inputFromServer);
                        }

                    }
                });
            } catch (SocketException e) {
                Platform.runLater(new Runnable() {
                    public void run() {
                        chatLog.add("Error in server");
                        log.error("Error in server");
                    }
                });
                break;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    public void clearPaintLog() {
    paintLog = FXCollections.observableArrayList();
    refreshListener();
    log.warn("PaintLog cleared!");

    }
}
