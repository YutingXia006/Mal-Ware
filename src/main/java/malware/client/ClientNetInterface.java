package malware.client;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import malware.client.malFunctions.CircleFunction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;


public class ClientNetInterface implements Runnable {
    private static final Logger log = LogManager.getLogger(CircleFunction.class);

    private CanvasPainter painter;

    private BufferedReader serverToClientReader;
    private PrintWriter clientToServerWriter;
    private String name;

    public String getName() {
        return name;
    }


    private ObservableList<String> chatLog;

    public ObservableList<String> getChatLog() {
        return chatLog;
    }

    private ObservableList<String> paintLog;

    public ObservableList<String> getPaintLog() {
        return paintLog;
    }


    private List<String> paintLogBuffer;
    public ObservableList<String> lastPaintLog;

    public List<String> getPaintLogBuffer() {
        return paintLogBuffer;
    }

    public ClientNetInterface() {

    }

    private boolean serverInputBlocked = false;

    public boolean isServerInputBlocked() {
        return serverInputBlocked;
    }


    public void bufferServerInput() {
        serverInputBlocked = true;
    }


    public void dismissServerBuffer() {
        log.info("adding paintLogBuffer:");

        //dont use addAll
        paintLogBuffer.forEach(e -> paintLog.add(e));
        paintLogBuffer.clear();

        allowServerInput();
    }

    public void allowServerInput() {
        serverInputBlocked = false;
    }

    public void startInterface(String hostName, int portNumber, String name, CanvasPainter painter) throws IOException {
        Socket clientSocket = new Socket(hostName, portNumber);
        serverToClientReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        clientToServerWriter = new PrintWriter(clientSocket.getOutputStream(), true);
        chatLog = FXCollections.observableArrayList();
        paintLog = FXCollections.observableArrayList();
        paintLogBuffer = new ArrayList<>();
        lastPaintLog = FXCollections.observableArrayList();
        this.name = name;
        clientToServerWriter.println(name);
        this.painter = painter;

        refreshListener();
    }


    private void refreshListener() {
        paintLog.addListener((ListChangeListener<String>) change -> onServerMessage());
    }

    public void onServerMessage() {
        if(paintLog.size()>0) {
            painter.applyServerInstruction(paintLog.size() - 1, false);
        }
    }

    public void writeToServer(String input) {
        clientToServerWriter.println(input);
    }

    public void run() {
        // Infinite loop to update the paint log from the server
        while (true) {
            try {
                final String inputFromServer = serverToClientReader.readLine();
                Platform.runLater(() -> {
                    chatLog.add(name + " : " + inputFromServer);
                    if (serverInputBlocked) {
                        paintLogBuffer.add(inputFromServer);
                    } else {
                        paintLog.add(inputFromServer);
                    }
                });
            } catch (SocketException e) {
                Platform.runLater(() -> {
                    chatLog.add("Error in server");
                    log.error("Error in server");
                });
                break;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void clearPaintLog() {
        paintLog = FXCollections.observableArrayList();
        refreshListener();
        log.warn("PaintLog cleared!");
    }
}
