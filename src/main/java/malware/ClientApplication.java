package malware;

import javafx.application.Application;
import javafx.collections.ListChangeListener;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeLineCap;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.ConnectException;
import java.util.ArrayList;

public class ClientApplication extends Application {
    private ArrayList<Thread> threads;
    private GraphicsContext gc;

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void stop() throws Exception {
        super.stop();
        for (Thread thread: threads){
            thread.interrupt();
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        threads = new ArrayList<Thread>();
        primaryStage.setTitle("Client");
        primaryStage.setScene(makeInitScene(primaryStage));
        primaryStage.show();
    }

    public Scene makeInitScene(Stage primaryStage) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setVgap(10);
        rootPane.setHgap(10);
        rootPane.setAlignment(Pos.CENTER);

        //text fields
        TextField nameField = new TextField();
        TextField hostNameField = new TextField();
        TextField portNumberField = new TextField();

        Label nameLabel = new Label("Name ");
        Label hostNameLabel = new Label("Host Name");
        Label portNumberLabel = new Label("Port Number");
        Label errorLabel = new Label();

        //submit button
        Button submitClientInfoButton = new Button("Done");
        submitClientInfoButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent Event) {
                // Instantiate the client class and start it's thread
                Client client;
                try {
                    client = new Client(hostNameField.getText(), Integer.parseInt(portNumberField.getText()), nameField.getText());
                    Thread clientThread = new Thread(client);
                    clientThread.setDaemon(true);
                    clientThread.start();
                    threads.add(clientThread);

                    //change scene
                    primaryStage.close();
                    primaryStage.setScene(makePaintUI(client));
                    primaryStage.setTitle("Client: " + client.name);
                    primaryStage.show();
                }
                catch(ConnectException e){
                    errorLabel.setTextFill(Color.RED);
                    errorLabel.setText("Invalid host name, try again");
                }
                catch (NumberFormatException | IOException e) {
                    errorLabel.setTextFill(Color.RED);
                    errorLabel.setText("Invalid port number, try again");
                }

            }
        });

        //add components to root
        rootPane.add(nameField, 0, 0);
        rootPane.add(nameLabel, 1, 0);
        rootPane.add(hostNameField, 0, 1);
        rootPane.add(hostNameLabel, 1, 1);
        rootPane.add(portNumberField, 0, 2);
        rootPane.add(portNumberLabel, 1, 2);
        rootPane.add(submitClientInfoButton, 0, 3, 2, 1);
        rootPane.add(errorLabel, 0, 4);

        //return scene
        return new Scene(rootPane, 400, 400);
    }

    public Scene makePaintUI(Client client) {
        //root
        GridPane rootPane = new GridPane();
        rootPane.setPadding(new Insets(20));
        rootPane.setAlignment(Pos.CENTER);
        rootPane.setHgap(10);
        rootPane.setVgap(10);

        //canvas
        int windowSizeX = 1080;
        int windowSizeY = 600;
        Canvas canvas = new Canvas(windowSizeX, windowSizeY - 100);

        gc = canvas.getGraphicsContext2D();
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2.0);
        gc.setLineCap(StrokeLineCap.ROUND);
        canvas.setStyle("-fx-alignment: bottom_center");
        canvas.setStyle("-fx-border-width: 10");

        canvas.addEventHandler(MouseEvent.MOUSE_PRESSED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                gc.beginPath();
                gc.moveTo(event.getX(), event.getY());
                gc.stroke();
            }
        });

        canvas.addEventHandler(MouseEvent.MOUSE_DRAGGED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                gc.lineTo(event.getX(), event.getY());
                gc.stroke();
            }
        });
        canvas.addEventHandler(MouseEvent.MOUSE_RELEASED, event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                gc.closePath();
            }
        });

        //Toolbar
        HBox toolbar = new HBox();
        toolbar.setPrefHeight(100);

        Slider strokeWidth = new Slider();
        strokeWidth.setMin(0.5);
        strokeWidth.setMax(40.0);
        strokeWidth.setOnMouseDragged(e -> {
            gc.setLineWidth(strokeWidth.getValue());
        });

        Button clear = new Button("Clear");
        clear.setFocusTraversable(false);

        clear.setOnAction(e -> {
            gc.clearRect(0, 0, windowSizeX, windowSizeY);
        });

        Button Fill = new Button("Fill");
        Fill.setFocusTraversable(false);

        Fill.setOnAction(e -> {
            gc.setFill(gc.getStroke());
            gc.fill();
        });

        Rectangle buttonColor1 = new Rectangle(20, 20);
        Rectangle buttonColor2 = new Rectangle(20, 20);
        Rectangle buttonColor3 = new Rectangle(20, 20);
        Rectangle buttonColor4 = new Rectangle(20, 20);

        Button colorChangeBlack = new Button();
        colorChangeBlack.setFocusTraversable(false);
        buttonColor1.setFill(Color.BLACK);
        colorChangeBlack.setGraphic(buttonColor1);
        colorChangeBlack.setBackground(null);
        colorChangeBlack.setContextMenu(null);

        colorChangeBlack.setOnAction(e -> {
            gc.setStroke(Color.BLACK);
        });

        Button colorChangeB = new Button();
        colorChangeB.setFocusTraversable(false);
        buttonColor2.setFill(Color.BLUE);
        colorChangeB.setGraphic(buttonColor2);
        colorChangeB.setBackground(null);

        colorChangeB.setOnAction(e -> {
            gc.setStroke(Color.BLUE);
        });

        Button colorChangeR = new Button();
        colorChangeR.setFocusTraversable(false);
        buttonColor3.setFill(Color.RED);
        colorChangeR.setGraphic(buttonColor3);
        colorChangeR.setBackground(null);

        colorChangeR.setOnAction(e -> {
            gc.setStroke(Color.RED);
        });

        Button colorChangeG = new Button();
        colorChangeG.setFocusTraversable(false);
        buttonColor4.setFill(Color.GREEN);
        colorChangeG.setGraphic(buttonColor4);
        colorChangeG.setBackground(null);

        colorChangeG.setOnAction(e -> {
            gc.setStroke(Color.GREEN);
        });

        Button networkSend = new Button();
        networkSend.setText("Send Message");
        networkSend.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String string = "";
                string += ((int) (Math.random() * windowSizeX) + ",");
                string += ((int) (Math.random() * windowSizeY) + ",");
                string += ((int) (Math.random() * windowSizeX) + ",");
                string += ((int) (Math.random() * windowSizeY));

                client.writeToServer(string);
                client.chatLog.add(string);
                client.paintLog.add(string);
            }
        });

        toolbar.setAlignment(Pos.CENTER);
        toolbar.setStyle("-fx-background-color: #404040");

        toolbar.getChildren().addAll(clear, Fill, colorChangeBlack, colorChangeB, colorChangeR, colorChangeG, networkSend, strokeWidth);


        BorderPane root = new BorderPane();
        root.setTop(toolbar);
        root.setCenter(canvas);
        root.setBottom(null);

        //Make the Chat's listView and set it's source to the Client's chatLog ArrayList
        ListView<String> chatListView = new ListView<String>();
        chatListView.setItems(client.chatLog);
        toolbar.getChildren().add(chatListView);
        client.chatLog.addListener(new ListChangeListener<String>() {
            @Override
            public void onChanged(Change<? extends String> change) {
                System.out.println(client.paintLog.size());
                //System.out.println(client.paintLog.get(client.paintLog.size()-1));

                if (client.paintLog.size() >= 0) {
                    String message = client.paintLog.get(client.paintLog.size() - 1);
                    System.out.print(message);
                    String[] variables = message.split(",");
                    gc.beginPath();
                    gc.moveTo(Integer.valueOf(variables[0]), Integer.valueOf(variables[1]));
                    gc.stroke();
                    gc.lineTo(Integer.valueOf(variables[2]), Integer.valueOf(variables[3]));
                    gc.stroke();
                }
            }
        });

        //Make and return the scene
        Scene scene = new Scene(root, windowSizeX, windowSizeY);
        return scene;
    }
}