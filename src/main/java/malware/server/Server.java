package malware.server;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import malware.UserAction;
import malware.client.InstructionFactory;

import java.io.*;
import java.net.*;
import java.util.ArrayList;


public class Server implements Runnable{
    private int portNumber;
    private ServerSocket socket;

    private InstructionFactory instructionFactory;
    private ArrayList<Socket> clients;
    private ArrayList<ClientThread> clientThreads;
    private ObservableList<String> serverLog;

    public ObservableList<String> getServerLog(){
        return  serverLog;
    }
    public ArrayList<String> getPaintLog() {
        return paintLog;
    }

    public ArrayList<String > paintLog;
    public ObservableList<String> clientNames;

    private int masterHistoryIndex;

    public int getMasterHistoryIndex(){
        return masterHistoryIndex;
    }

    public void incrHistoryIndex(){
        masterHistoryIndex++;
    }

    public Server(int portNumber) throws IOException {
        this.portNumber = portNumber;
        serverLog = FXCollections.observableArrayList();
        clientNames = FXCollections.observableArrayList();
        clients = new ArrayList<Socket>();
        clientThreads = new ArrayList<ClientThread>();
        socket = new ServerSocket(portNumber);
        paintLog = new ArrayList<>();
        instructionFactory = new InstructionFactory();
        masterHistoryIndex = 0;
    }

    public void run() {
        try {
            //accept incoming connection requests
            while (true) {
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        serverLog.add("Listening for client");
                    }
                });

                final Socket clientSocket = socket.accept();
                clients.add(clientSocket);

                // Add to log that a client connected
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        serverLog.add("Client " + clientSocket.getRemoteSocketAddress() + " connected");
                    }
                });

                ClientThread clientThreadHolderClass = new ClientThread(clientSocket, this);
                Thread clientThread = new Thread(clientThreadHolderClass);
                clientThreads.add(clientThreadHolderClass);
                clientThread.setDaemon(true);
                clientThread.start();
                ServerApplication.threads.add(clientThread);

                sendPaintLog(clientThreadHolderClass);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public void clientDisconnected(ClientThread client) {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                serverLog.add("Client " + client.getClientSocket().getRemoteSocketAddress() + " disconnected");
                clients.remove(clientThreads.indexOf(client));
                clientNames.remove(clientThreads.indexOf(client));
                clientThreads.remove(clientThreads.indexOf(client));
            }
        });
    }

    private void writeToAllSockets(String input) {
        for (ClientThread clientThread : clientThreads) {
            clientThread.writeToServer(input);
            System.out.println("writing to all: " +input);
        }
    }

    public void sendPaintLog(ClientThread clientThread){
        paintLog.forEach(e->{
            clientThread.writeToServer(e);
        });

    }

    public void handleMessage(String inputToServer) {
        String action = instructionFactory.extractAction(inputToServer);

        if(action.equals(UserAction.BUTTON_CLEAR.toString())){
            paintLog.clear();
        }else if(action.equals(UserAction.BUTTON_UNDO.toString())){
            undo();
        }

        paintLog.add(inputToServer);
        writeToAllSockets(inputToServer);
    }

    private void undo(){
        ArrayList<String> undoList = new ArrayList<>();

        String[] lastLog = paintLog.get(paintLog.size()-1).split(":");

        int lastIndex = Integer.parseInt(lastLog[0]);

        paintLog.stream().filter(e -> e.startsWith(lastIndex + ":")).forEach(e-> undoList.add(e));
        paintLog.removeAll(undoList);

        redrawOnClients();
    }

    private void redrawOnClients() {
        writeToAllSockets(instructionFactory.createInstructionShort("",UserAction.BUTTON_CLEAR));

        for (int i= 0; i <= masterHistoryIndex ; i++) {
            final int streamI = i;
            paintLog.forEach(s->{

                if(s.startsWith(streamI +":")){
                    s = s+":1";
                    writeToAllSockets(s);
                }
            });
        }
    }
}
