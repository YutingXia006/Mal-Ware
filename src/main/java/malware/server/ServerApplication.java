package malware.server;

import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;

public class ServerApplication extends Application {
    public static ArrayList<Thread> threads;
    public static void main(String[] args){
        launch();
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        threads = new ArrayList<Thread>();
        primaryStage.setTitle("Server");
        primaryStage.setScene(makePortUI(primaryStage));
        primaryStage.show();
    }

    public Scene makePortUI(Stage primaryStage) {
              
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(400, 300);
        rootPane.setStyle("-fx-background-color: #eeeeee");

        HBox header = new HBox();
        header.setPrefHeight(40.0);
        header.setStyle("-fx-background-color: #dddddd");
        Label label = new Label("Launch a session...");
        header.getChildren().add(label);
        header.setPadding(new Insets(12, 0, 0, 20));
        rootPane.setTop(header);

        //text fields and labels
        VBox ui = new VBox();
        Text portText = new Text("Port Number");
        Label errorLabel = new Label();
        errorLabel.setTextFill(Color.RED);
        TextField portTextField = new TextField();
        ui.getChildren().add(errorLabel);
        ui.getChildren().add(portText);
        ui.getChildren().add(portTextField);
        ui.setSpacing(10);
        ui.setPadding(new Insets(30, 100, 0, 100));

        //submit button
        Button portApprovalButton = new Button("Done");
        portApprovalButton.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                //run server thread
                try {
                    Server server = new Server(Integer.parseInt(portTextField.getText()));
                    Thread serverThread = (new Thread(server));
                    serverThread.setName("Server Thread");
                    serverThread.setDaemon(true);
                    serverThread.start();
                    threads.add(serverThread);

                    //change scene
                    primaryStage.hide();
                    primaryStage.setScene(makeServerUI(server));
                    primaryStage.show();
                }catch(IllegalArgumentException e){
                    errorLabel.setText("Invalid port number");
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        //add views to pane
        ui.getChildren().add(portApprovalButton);
        rootPane.setCenter(ui);

        //return scene
        return new Scene(rootPane);
    }
    public Scene makeServerUI(Server server){
        //root
        BorderPane rootPane = new BorderPane();
        rootPane.setPrefSize(500, 500);
        rootPane.setStyle("-fx-background-color: #eeeeee");
        VBox left = new VBox();
        left.setSpacing(10);
        VBox right = new VBox();
        right.setSpacing(10);
        rootPane.setLeft(left);
        rootPane.setRight(right);

        HBox header = new HBox();
        header.setPrefHeight(40.0);
        header.setStyle("-fx-background-color: #dddddd");
        Label label = new Label("Keep track of your session...");
        header.getChildren().add(label);
        header.setPadding(new Insets(12, 0, 0, 20));
        rootPane.setTop(header);

        //server log ListView
        Label logLabel = new Label("Server Log");
        ListView<String> logView = new ListView<String>();
        ObservableList<String> logList = server.serverLog;
        logView.setItems(logList);

        left.getChildren().add(logLabel);
        left.getChildren().add(logView);
        left.setPadding(new Insets(12));

        //client list ListView
        Label clientLabel = new Label("Clients Connected");
        ListView<String> clientView = new ListView<String>();
        ObservableList<String> clientList = server.clientNames;
        clientView.setItems(clientList);

        right.getChildren().add(clientLabel);
        right.getChildren().add(clientView);
        right.setPadding(new Insets(12));

        //return scene
        return new Scene(rootPane);
    }
}