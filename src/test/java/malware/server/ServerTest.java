package malware.server;

import malware.UserAction;
import malware.client.InstructionFactory;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class ServerTest {

    private final String TEST_CLIENT_NAME = "Loramic";
    final int PORTNUMBER = 52350;

    @Test
    void handleMessageUndo() throws IOException {

        Server server = new Server(PORTNUMBER);

        int historyIndexToDelete = 2;

        // Fill up paintLog
        server.getPaintLog().add(getTestString(1, UserAction.PRESS));
        server.getPaintLog().add(getTestString(1, UserAction.DRAG));
        server.getPaintLog().add(getTestString(1, UserAction.RELEASE));
        server.getPaintLog().add(getTestString(2, UserAction.PRESS));
        server.getPaintLog().add(getTestString(2, UserAction.DRAG));
        server.getPaintLog().add(getTestString(2, UserAction.DRAG));
        server.getPaintLog().add(getTestString(2, UserAction.RELEASE));
        server.getPaintLog().add(getTestString(3, UserAction.PRESS));
        server.getPaintLog().add(getTestString(3, UserAction.RELEASE));

        // Last action added (decides which index will be undone)
        server.getPaintLog().add(getTestString(historyIndexToDelete, UserAction.PRESS));

        String message = getTestString(historyIndexToDelete + 1, UserAction.BUTTON_UNDO);   // +1 so always different than historyIndexToDelete
        server.handleMessage(message);

        server.getPaintLog().forEach(e -> {
            int historyIndex = Integer.parseInt(message.split(":")[0]);
            assertNotEquals(historyIndexToDelete, historyIndex);
        });

    }

    String getTestString(int historyIndex, UserAction userAction) {
        Random rand = new Random();
        String ACTION_STRING = userAction.toString();
        String COLOR = "0x000000ff";
        String LINEWIDTH = Double.toString(rand.nextDouble(20d));
        double X_COORD = rand.nextDouble(500d);
        double Y_COORD = rand.nextDouble(500d);
        InstructionFactory factory = new InstructionFactory();
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        message = message.replaceFirst("i0:", historyIndex+":");
        return message;
    }
}