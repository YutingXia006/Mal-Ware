package malware.client;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class InstructionFactoryTest {

    private final String TEST_CLIENT_NAME = "Loramic";

    @Test
    void instructionFactoryTest() {

        final int HISTORY_INDEX = 10;
        String ACTION_STRING = UserAction.PRESS.toString();
        String COLOR = "placeholderCol";    // TODO placeholder durch realistische Werte ersetzen
        String LINEWIDTH = "placeholderLine";   // TODO placeholder durch realistische Werte ersetzen
        double X_COORD = 124.4d;
        double Y_COORD = 455.32d;

        InstructionFactory factory = new InstructionFactory();
        String sendString = factory.createInstruction(HISTORY_INDEX, TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);

        // Alternativer Weg zu testen aber unübersichtlicher und anfällig für Schreibfehler
        //final String fullMessage = HISTORY_INDEX + ":" + TEST_CLIENT_NAME + ":" + ACTION_STRING + ":" + COLOR + ":" + LINEWIDTH + ":" + X_COORD + "," + Y_COORD;
        //assertEquals(fullMessage, sendString);


        // 0 historyIndex : 1 clientName : 2 action : 3 color : 4 lineWidth : 5 x,y
        String[] splitMessage = sendString.split(":");
        String[] splitCoords = splitMessage[5].split(",");

        assertAll(
                () -> assertEquals(HISTORY_INDEX, Integer.parseInt(splitMessage[0]), "historyIndex failed"),
                () -> assertEquals(TEST_CLIENT_NAME, splitMessage[1], "clientName failed"),
                () -> assertEquals(ACTION_STRING, splitMessage[2], "actionString failed"),
                () -> assertEquals(COLOR, splitMessage[3], "color failed"),
                () -> assertEquals(LINEWIDTH, splitMessage[4], "linewidth failed"),
                () -> assertEquals(X_COORD, Double.parseDouble(splitCoords[0]), "X-Coord failed"),
                () -> assertEquals(Y_COORD, Double.parseDouble(splitCoords[1]), "Y-Coord failed")
        );

    }

}
