package malware.client;

import malware.InstructionFactory;
import malware.UserAction;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class InstructionFactoryTest {

    private final String TEST_CLIENT_NAME = "Loramic";
    private final String DEFAULT_INDEX = "i0";
    private final String ACTION_STRING = UserAction.PRESS.toString();
    private final String COLOR = "0x000000ff";
    private final String LINEWIDTH = "2.0";
    private final double X_COORD = 124.4d;
    private final double Y_COORD = 455.32d;
    private final InstructionFactory factory = new InstructionFactory();

    @Test
    void createInstruction() {

        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);

        // 0 defaultIndex : 1 clientName : 2 action : 3 color : 4 lineWidth : 5 x,y
        String[] splitMessage = message.split(":");
        String[] splitCoords = splitMessage[5].split(",");

        assertAll(
                () -> assertEquals(DEFAULT_INDEX, splitMessage[0], "defaultIndex failed"),
                () -> assertEquals(TEST_CLIENT_NAME, splitMessage[1], "clientName failed"),
                () -> assertEquals(ACTION_STRING, splitMessage[2], "actionString failed"),
                () -> assertEquals(COLOR, splitMessage[3], "color failed"),
                () -> assertEquals(LINEWIDTH, splitMessage[4], "linewidth failed"),
                () -> assertEquals(X_COORD, Double.parseDouble(splitCoords[0]), "X-Coord failed"),
                () -> assertEquals(Y_COORD, Double.parseDouble(splitCoords[1]), "Y-Coord failed")
        );
    }

    @Test
    void createInstructionShort() {

        String message = factory.createInstructionShort(TEST_CLIENT_NAME, UserAction.valueOf(ACTION_STRING));

        // 0 defaultIndex : 1 clientName : 2 action : 3 color : 4 lineWidth : 5 x,y
        String[] splitMessage = message.split(":");
        assertAll(
                () -> assertEquals(TEST_CLIENT_NAME, splitMessage[1]),
                () -> assertEquals(ACTION_STRING, splitMessage[2])
        );
    }

    @Test
    void extractClientName() {
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        String extractedClientName = factory.extractClientName(message);
        assertEquals(TEST_CLIENT_NAME, extractedClientName);
    }

    @Test
    void extractAction() {
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        String extractedAction = factory.extractAction(message);
        assertEquals(ACTION_STRING, extractedAction);
    }

    @Test
    void extractColor() {
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        String extractedColor = factory.extractColor(message);
        assertEquals(COLOR, extractedColor);
    }

    @Test
    void extractLineWidth() {
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        String extractedLineWidth = factory.extractLineWidth(message);
        assertEquals(LINEWIDTH, extractedLineWidth);
    }

    @Test
    void extractCoordinates() {
        String message = factory.createInstruction(TEST_CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        String extractedCoordinates = factory.extractCoordinates(message);
        assertEquals(X_COORD+","+Y_COORD, extractedCoordinates);
    }

}
