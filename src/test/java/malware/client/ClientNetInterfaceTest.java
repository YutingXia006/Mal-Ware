package malware.client;

import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.scene.canvas.Canvas;
import malware.InstructionFactory;
import malware.UserAction;
import malware.server.Server;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class ClientNetInterfaceTest {

    final private String CLIENT_NAME = "Loramic";
    final String HOST_IP = "localhost";
    static int portnumber = 52250;

    @BeforeEach
    void changePortnumber() {
        portnumber += 5;
    }

    @Test
    void clientToClientSendingIntegrationTest() throws IOException {
        final Server server = new Server(portnumber);
        new JFXPanel();
        final ClientNetInterface clientNetInterface1 = new ClientNetInterface();
        final ClientNetInterface clientNetInterface2 = new ClientNetInterface();

        Thread threadForServerRun = new Thread(() -> {
            server.run();
        });

        Thread threadForClientRun1 = new Thread(() -> {
            clientNetInterface1.run();
        });

        Thread threadForClientRun2 = new Thread(() -> {
            clientNetInterface2.run();
        });


        Canvas canvas1 = new Canvas(0,0 );
        CanvasPainter painter1 = new CanvasPainter(canvas1.getGraphicsContext2D(), clientNetInterface1);
        clientNetInterface1.startInterface(HOST_IP, portnumber, CLIENT_NAME, painter1);

        Canvas canvas2 = new Canvas(0,0 );
        CanvasPainter painter2 = new CanvasPainter(canvas2.getGraphicsContext2D(), clientNetInterface1);
        clientNetInterface2.startInterface(HOST_IP, portnumber, CLIENT_NAME+"d", painter2);

        threadForServerRun.start();
        threadForClientRun1.start();
        threadForClientRun2.start();

        String sendString = getTestString(UserAction.PRESS);
        sendString = sendString.replaceFirst("i0:", "0:");


        clientNetInterface1.writeToServer(sendString);

        final long startTime = System.nanoTime();
        final int timeToWaitInSeconds = 4;
        final long timeToWaitInNanoSeconds = (long)timeToWaitInSeconds * 1_000_000_000;

        while (clientNetInterface2.getPaintLog().size() == 0) {
            if (System.nanoTime() - startTime > timeToWaitInNanoSeconds) {
                fail("Nothing added to Client2PaintLog within " + timeToWaitInSeconds + " seconds");
            }
        }

        assertEquals(sendString, clientNetInterface2.getPaintLog().get(0));
    }

    @Test
    void dismissServerBuffer() {

        ClientNetInterface clientNetInterface = getTestingClient();

        String message = getTestString(UserAction.PRESS);
        clientNetInterface.getPaintLogBuffer().add(message);

        clientNetInterface.dismissServerBuffer();

        ObservableList<String> paintLog = clientNetInterface.getPaintLog();

        assertAll(
                () -> assertEquals(message, paintLog.get(paintLog.size() - 1), "Not added to paintLog"),
                () -> assertNotEquals(clientNetInterface.getPaintLog(), clientNetInterface.getPaintLogBuffer(), "Buffer not cleared")
        );
    }

    @Test
    void onServerMessage() throws IOException {
        final Server server = new Server(portnumber);
        ClientNetInterface clientNetInterface = new ClientNetInterface();
        CanvasPainter painter = Mockito.mock(CanvasPainter.class);
        clientNetInterface.startInterface(HOST_IP, portnumber, CLIENT_NAME, painter);

        String sendString = getTestString(UserAction.PRESS);
        sendString = sendString.replaceFirst("i0:", "1:");
        System.out.println(sendString);

        // painter.applyServerInstruction not called when paintLog is empty
        clientNetInterface.onServerMessage();
        Mockito.verifyNoInteractions(painter);

        // painter.applyServerInstruction called when paintLog not empty
        clientNetInterface.getPaintLog().add(sendString);
        clientNetInterface.onServerMessage();
        // 2 times because once called when adding and once called explicitly
        Mockito.verify(painter, Mockito.times(2)).applyServerInstruction(0, false);
        System.out.println("Ended this test");

    }

    @Test
    void writeToServer() throws IOException, InterruptedException {

        new JFXPanel();

        final Server server = new Server(portnumber);
        final ClientNetInterface clientNetInterface = new ClientNetInterface();

        Thread threadForServerRun = new Thread(() -> {
            server.run();
        });

        Canvas canvas = new Canvas(0,0 );
        CanvasPainter painter = new CanvasPainter(canvas.getGraphicsContext2D(), clientNetInterface);
        clientNetInterface.startInterface(HOST_IP, portnumber, CLIENT_NAME, painter);

        threadForServerRun.start();

        String sendString = getTestString(UserAction.PRESS);
        sendString = sendString.replaceFirst("i0:", "1:");

        clientNetInterface.writeToServer(sendString);

        final long startTime = System.nanoTime();
        final int timeToWaitInSeconds = 4;
        final long timeToWaitInNanoSeconds = (long)timeToWaitInSeconds * 1_000_000_000;

        while (server.getPaintLog().size() == 0) {
            if (System.nanoTime() - startTime > timeToWaitInNanoSeconds) {
                fail("Nothing added to ServerPaintLog within " + timeToWaitInSeconds + " seconds");
            }
        }
        assertEquals(sendString, server.getPaintLog().get(0));
    }



    @Test
    void clearPaintLog() {
        ClientNetInterface clientNetInterface = getTestingClient();
        String message = getTestString(UserAction.PRESS);

        clientNetInterface.getPaintLog().add(message);
        ObservableList<String> filledPaintLog = clientNetInterface.getPaintLog();

        clientNetInterface.clearPaintLog();

        assertEquals(0, clientNetInterface.getPaintLog().size());

    }

    ClientNetInterface getTestingClient() {
        Server server = null;
        try {
            server = new Server(portnumber);
        } catch(IOException ex) {
            fail("Starting Server for Test purposes failed!");
        }
        ClientNetInterface clientNetInterface = new ClientNetInterface();
        Canvas canvas = new Canvas(0,0 );
        CanvasPainter painter = new CanvasPainter(canvas.getGraphicsContext2D(), clientNetInterface);
        try {
            clientNetInterface.startInterface(HOST_IP, portnumber, CLIENT_NAME, painter);
        } catch(Exception ex) {
            fail("Starting ClientNetInterface for Test purposes failed!");
        }
        return clientNetInterface;
    }

    String getTestString(UserAction userAction) {
        Random rand = new Random();
        String ACTION_STRING = userAction.toString();
        String COLOR = "0x000000ff";
        String LINEWIDTH = Double.toString(rand.nextDouble(20d));
        double X_COORD = rand.nextDouble(500d);
        double Y_COORD = rand.nextDouble(500d);
        InstructionFactory factory = new InstructionFactory();
        String message = factory.createInstruction(CLIENT_NAME, ACTION_STRING, COLOR, LINEWIDTH, X_COORD, Y_COORD);
        return message;
    }
}