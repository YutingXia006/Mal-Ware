package malware.client.uiClient;

import javafx.embed.swing.JFXPanel;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.Label;
import malware.UserAction;
import malware.client.CanvasPainter;
import malware.client.ClientNetInterface;
import malware.client.malFunctions.FunctionHandler;
import malware.server.Server;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class ClientActionHandlerTest {

    private final String TEST_CLIENT_NAME = "Loramic";
    final String HOST_IP = "localhost";
    static int portnumber = 52150;

    @BeforeEach
    void changePortnumber() {
        portnumber += 1;
    }

    @Test
    void submitClientInfo() throws IOException {

        new JFXPanel();
        ArrayList<Thread> threads = new ArrayList<>();
        Label errorLabel = new Label();
        ClientNetInterface clientNetInterface = new ClientNetInterface();

        Canvas canvas = new Canvas(0,0 );
        CanvasPainter painter = new CanvasPainter(canvas.getGraphicsContext2D(), clientNetInterface);

        FunctionHandler functionHandler = new FunctionHandler(painter, canvas.getGraphicsContext2D());
        ClientActionHandler clientActionHandler = new ClientActionHandler(
                clientNetInterface,
                painter,
                threads,
                canvas.getGraphicsContext2D(),
                functionHandler
        );

        // Rejects connection if no server started
        boolean successfullyConnected = clientActionHandler.submitClientInfo(HOST_IP, portnumber, TEST_CLIENT_NAME, errorLabel);
        assertFalse(successfullyConnected);

        final Server server = new Server(portnumber);
        // Connects if server started
        successfullyConnected = clientActionHandler.submitClientInfo(HOST_IP, portnumber, TEST_CLIENT_NAME, errorLabel);
        assertTrue(successfullyConnected);

    }

    @Test
    void mouseAction() throws IOException {
        final double X_COORD = 124.4d;
        final double Y_COORD = 455.32d;

        new JFXPanel();

        final Server server = new Server(portnumber);
        final ClientNetInterface clientNetInterface = new ClientNetInterface();

        Thread threadForServerRun = new Thread(() -> {
            server.run();
        });

        Thread threadForClientRun = new Thread(() -> {
            clientNetInterface.run();
        });

        ArrayList<Thread> threads = new ArrayList<>();

        Canvas canvas = new Canvas(0,0 );
        CanvasPainter painter = new CanvasPainter(canvas.getGraphicsContext2D(), clientNetInterface);
        clientNetInterface.startInterface(HOST_IP, portnumber, TEST_CLIENT_NAME, painter);


        FunctionHandler functionHandler = new FunctionHandler(painter, canvas.getGraphicsContext2D());
        ClientActionHandler clientActionHandler = new ClientActionHandler(
                clientNetInterface,
                painter,
                threads,
                canvas.getGraphicsContext2D(),
                functionHandler
        );

        threadForServerRun.start();
        threadForClientRun.start();

        assertEquals(0, server.getPaintLog().size());
        clientActionHandler.mouseAction(UserAction.PRESS, X_COORD, Y_COORD);

        final long startTime = System.nanoTime();
        final int timeToWaitInSeconds = 4;
        final long timeToWaitInNanoSeconds = (long)timeToWaitInSeconds * 1_000_000_000;
        while (server.getPaintLog().size() == 0) {
            if (System.nanoTime() - startTime > timeToWaitInNanoSeconds) {
                fail("Nothing added to ServerPaintLog within " + timeToWaitInSeconds + " seconds");
            }
        }

        assertNotEquals(0, server.getPaintLog().size());

    }

}